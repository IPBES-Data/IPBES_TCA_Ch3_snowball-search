---
title: "Snowball Search and global quantification of the references"
format:
    html:
        toc: true
        toc-depth: 2
        embed-resources: true
        code-fold: true
        code-summary: "Show the code"
    docx:
        toc: true
        toc-depth: 2
        number-sections: true
        highlight-style: github
    pdf:
        toc: true
        toc-depth: 2
        number-sections: true
---

# Setup
```{r}
#| label: setup
#|

library(bibtex)
library(openalexR)
library(writexl)
library(tibble)
library(dplyr)
# library(ggplot2)
# library(knitr)

kp <- bibtex::read.bib("./key-paper.bib")
dois <- sapply(
    kp,
    function(x) {
        x$doi
    }
)

```

# Searches

## OpenAlex

### Setup OpelAnex usage and do snowball serarch

```{r}
#| label: openalex_prep
#|
library(IPBES.R)
library(ggraph)
library(tidygraph)

key_works <- oa_fetch(
    entity = "works",
    doi = dois,
    verbose = FALSE
)

ids <- openalexR:::shorten_oaid(key_works$id)

citing_kp <- lapply(
    ids,
    function(id) {
        oa_fetch(
            entity = "works",
            output = "tibble",
            cites = id,
            verbose = FALSE
        )
    }
)
names(citing_kp) <- ids

cited_by_kp <- lapply(
    ids,
    function(id) {
        oa_fetch(
            entity = "works",
            output = "tibble",
            cited_by = id,
            verbose = FALSE
        )
    }
)
names(cited_by_kp) <- ids

if (file.exists("snowball.rds")) {
    snowball <- readRDS("snowball.rds")
} else {
    snowball <- oa_snowball(
        identifier = ids,
        verbose = FALSE
    )
    saveRDS(snowball, "snowball.rds")
}

flat_snow <- snowball2df(snowball) |>
    tibble::as_tibble()
```

### Save snowball as Excel file (`snowball_excel.xlsx`)

```{r}
#| label: openalex_excel
#| 
IPBES.R::to_xlsx(snowball, file.path(".", "data", "snowball_.xlsx"))
```

### Graph of links between references

```{r}
#| label: openalex_graph
#|

snowball$nodes$cited_by_count_by_year <- snowball$nodes$cited_by_count / (2024 - snowball$nodes$publication_year)

tmp <- IPBES.R::plot_snowball(snowball, name = "snowball", path = "figures")
```
![Cited by count](figures/snowball_cited_by_count.png)

### Supplemented by edges between all papers

```{r}
#| label: openalex_supplement
#| 

new_edges <- tibble(
    from = character(0),
    to = character(0)
)

works <- snowball$nodes$id

for (i in 1:nrow(snowball$nodes)) {
    from <- works[[i]]
 to <- gsub("https://openalex.org/", "", snowball$nodes$referenced_works[[i]])
    to_in_works <- to[to %in% works]
    if (length(to_in_works) > 0) {
        new_edges <- add_row(
            new_edges,
            tibble(
                from = from,
                to = to_in_works
            )
        )
    }
}

snowball_supplemented <- snowball
snowball_supplemented$edges <- add_row(snowball_supplemented$edges, new_edges) |>
    distinct()

IPBES.R::plot_snowball(snowball_supplemented, name = "snowball_supplemented", path = "figures")

IPBES.R::to_xlsx(snowball_supplemented, file.path(".", "data", "snowball_supplemented.xlsx"))
```
![Supplemented Cited by count](figures/snowball_supplemented_cited_by_count.png)

### Identification of references with more than one edge

This is the number of connections (`connection_count)`of the paper (`id`)

```{r}
#| label: openalex_edgecount
#|

mult_edge <- flat_snow |>
    select(id, connection_count) |>
    filter(connection_count > 1) |>
    arrange(desc(connection_count))

links <- flat_snow |>
    filter(id %in% mult_edge$id)

links |>
    select(id, display_name, publication_year, doi, connection_count) |>
    arrange(desc(connection_count)) |>
    knitr::kable()
```


### Identification of Concepts

OpenAlex assigns all works concepts. The concepts are in hirarchical order, ranging from 0 to 3. The higher the number, the more specific the concept. The concepts are assigned to the paper (`id`)


#### Level 0
```{r}
#| label: l0
#| 

x <- lapply(
    flat_snow[["concepts"]],
    FUN = function(x) {
        x[["display_name"]][x[["level"]] == 0]
    }
) |>
    unlist() |>
    table() |>
    as.data.frame() |> 
    rename(
        l0_concept = Var1,
        count = Freq
    ) |>
    arrange(desc(count))

writexl::write_xlsx(x, file.path(".", "data", "concepts_l0.xlsx"))

knitr::kable(x)
```

#### Level 1
```{r}
#| label: l1
#| 

x <- lapply(
    flat_snow[["concepts"]],
    function(x) {
        x[["display_name"]][x[["level"]] == 1]
    }
) |>
    unlist() |>
    table() |>
    as.data.frame() |> 
    rename(
        l1_concept = Var1,
        count = Freq
    ) |>
    arrange(desc(count))
    
writexl::write_xlsx(x, file.path(".", "data", "concepts_l1.xlsx"))

knitr::kable(x)
```

#### Level 2

```{r}
#| label: l2
#| 

x <- lapply(
    flat_snow[["concepts"]],
    function(x) {
        x[["display_name"]][x[["level"]] == 2]
    }
) |>
    unlist() |>
    table() |>
    as.data.frame() |> 
    rename(
        l2_concept = Var1,
        count = Freq
    ) |>
    arrange(desc(count))
    
writexl::write_xlsx(x, file.path(".", "data", "concepts_l2.xlsx"))

knitr::kable(x)
```

#### Level 3

```{r}
#| label: l3
#| 

x <- lapply(
    flat_snow[["concepts"]],
    function(x) {
        x[["display_name"]][x[["level"]] == 3]
    }
) |>
    unlist() |>
    table() |>
    as.data.frame() |> 
    rename(
        l3_concept = Var1,
        count = Freq
    ) |>
    arrange(desc(count))
    
writexl::write_xlsx(x, file.path(".", "data", "concepts_l3.xlsx"))

knitr::kable(x)
```

#### Level 4

```{r}
#| label: l4
#| 

x <- lapply(
    flat_snow[["concepts"]],
    function(x) {
        x[["display_name"]][x[["level"]] == 4]
    }
) |>
    unlist() |>
    table() |>
    as.data.frame() |> 
    rename(
        l4_concept = Var1,
        count = Freq
    ) |>
    arrange(desc(count))
    
writexl::write_xlsx(x, file.path(".", "data", "concepts_l4.xlsx"))
    
knitr::kable(x)
```

#### Level 5

```{r}
#| label: l5
#| 

x <- lapply(
    flat_snow[["concepts"]],
    function(x) {
        x[["display_name"]][x[["level"]] == 5]
    }
) |>
    unlist() |>
    table() |>
    as.data.frame() |> 
    rename(
        l5_concept = Var1,
        count = Freq
    ) |>
    arrange(desc(count))
    
writexl::write_xlsx(x, file.path(".", "data", "concepts_l5.xlsx"))

knitr::kable(x)
```

