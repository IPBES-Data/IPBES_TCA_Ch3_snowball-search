---
title: "Snowball Search and global quantification of the references"
format:
    html:
        toc: true
        embed-resources: true
        code-fold: true
        code-summary: "Show the code"
    docx:
        toc: true
        number-sections: true
        highlight-style: github
    pdf:
        toc: true
        number-sections: true

---

# Setup
```{r}
#| label: setup
#| 

library(bibtex)
library(openalexR)

#library(dplyr)
#library(ggplot2)
#library(knitr)

kp <- bibtex::read.bib("./key-paper.bib")
dois <- sapply(
    kp, 
    function(x){
        x$doi
    }
    )

```

# Searches

## OpenAlex

### Setup OpelAnex usage and do snowball serarch

```{r}
#| label: openalex_prep
#| 

library(ggraph)
library(tidygraph)

key_works <- oa_fetch(
    entity = "works",
    doi = dois,
    verbose = FALSE
)

ids <- openalexR:::shorten_oaid(key_works$id)

citing_kp <- lapply(
    ids,
    function(id) {
        oa_fetch(
            entity = "works",
            output = "tibble",
            cites = id,
            verbose = FALSE
        )
    }
)
names(citing_kp) <- ids

cited_by_kp <- lapply(
    ids,
    function(id) {
        oa_fetch(
            entity = "works",
            output = "tibble",
            cited_by = id,
            verbose = FALSE
        )
    }
)
names(cited_by_kp) <- ids

## get the snowball data
snowball <- oa_snowball(
    identifier = ids,
    verbose = FALSE
)

flat_snow <- snowball2df(snowball)
```

### Graph of links between references

```{r}
#| label: openalex_graph
#| 

ggraph(graph = as_tbl_graph(snowball), layout = "stress") +
    geom_edge_link(aes(alpha = after_stat(index)), show.legend = FALSE) +
    geom_node_point(aes(fill = oa_input, size = cited_by_count), shape = 21, color = "white") +
    geom_node_label(aes(filter = oa_input, label = id), nudge_y = 0.2, size = 3) +
    scale_edge_width(range = c(0.1, 1.5), guide = "none") +
    scale_size(range = c(3, 10), guide = "none") +
    scale_fill_manual(values = c("#a3ad62", "#d46780"), na.value = "grey", name = "") +
    theme_graph() +
    theme(
        plot.background = element_rect(fill = "transparent", colour = NA),
        panel.background = element_rect(fill = "transparent", colour = NA),
        legend.position = "bottom"
    ) +
    guides(fill = "none")

```

### Identification of references with more than one edge

This is the number of connections (`connection_count)`of the paper (`id`)

```{r}
#| label: openalex_edgecount
#| 
    
mult_edge <- flat_snow |>
    select(id, connection_count) |>
    filter(connection_count > 1) |>
    arrange(desc(connection_count))

links <- flat_snow |>
    filter(id %in% mult_edge$id)

links |>
    select(id, display_name, publication_year, doi, connection_count) |>
    arrange(desc(connection_count)) |>
    knitr::kable()
```


### Identification of Concepts

OpenAlex assigns all works concepts. The concepts are in hirarchical order, ranging from 0 to 3. The higher the number, the more specific the concept. The concepts are assigned to the paper (`id`)


#### Level 0
```{r}
lapply(
    flat_snow[["concepts"]],
    FUN = function(x) {
        x[["display_name"]][x[["level"]] == 0]
    }
) |>
    unlist() |>
    table() |>
    sort(decreasing = TRUE) |>
    knitr::kable()
```

#### Level 1
```{r}
lapply(
    flat_snow[["concepts"]],
    function(x) {
        x[["display_name"]][x[["level"]] == 1]
    }
) |>
    unlist() |>
    table() |>
    sort(decreasing = TRUE) |>
    knitr::kable()
```

#### Level 2

```{r}
lapply(
    flat_snow[["concepts"]],
    function(x) {
        x[["display_name"]][x[["level"]] == 2]
    }
) |>
    unlist() |>
    table() |>
    sort(decreasing = TRUE) |>
    knitr::kable()
```

#### Level 3

```{r}
lapply(
    flat_snow[["concepts"]],
    function(x) {
        x[["display_name"]][x[["level"]] == 3]
    }
) |>
    unlist() |>
    table() |>
    sort(decreasing = TRUE) |>
    knitr::kable()
```

